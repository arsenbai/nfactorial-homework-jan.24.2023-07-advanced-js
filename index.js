/*------------- 07-advanced-js ------------*/

/* EXERCISE 1
Задержка на промисах
Встроенная функция `setTimeout` использует колбэк-функции. 
Создайте альтернативу, использующую промисы.
Функция `delay(ms)` должна возвращать промис, 
который перейдёт в состояние «выполнен» через `ms` миллисекунд, 
так чтобы мы могли добавить к нему `.then`:
*/

// SOLUTION 1

// function delay(ms) {
//     // ваш код
//     return new Promise(resolve => {
//         setTimeout(resolve, ms);        
//     })
//   }
// delay(3000).then(() => alert('выполнилось через 3 секунды'));



/*------------------------------------------------------------------*/


/* EXERCISE 2
Можно ли "перевыполнить" промис?
Что выведет код ниже?

let promise = new Promise(function(resolve, reject) {
  resolve(1);

  setTimeout(() => resolve(2), 1000);
});
promise.then(alert);
*/


// SOLUTION 2
// Выведет "1"

/*------------------------------------------------------------------*/

/* EXERCISE 3
Промисы: сравните then и catch
Являются ли фрагменты кода ниже эквивалентными? 
Другими словами, ведут ли они себя одинаково во всех обстоятельствах, 
для всех переданных им обработчиков?
promise.then(f1).catch(f2);
Против:
promise.then(f1, f2);
*/


// SOLUTION 3
/*
В первом обработчике .catch() поймает ошибку в f1, но втором - не сможет обработать ошибку f1.
*/

/*------------------------------------------------------------------*/